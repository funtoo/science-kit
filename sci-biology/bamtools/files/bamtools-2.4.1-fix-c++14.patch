* Fix building in C++11/C++14 modes
See also: https://bugs.gentoo.org/show_bug.cgi?id=596208

Taken from https://github.com/pezmaster31/bamtools/pull/139

--- a/src/api/BamConstants.h
+++ b/src/api/BamConstants.h
@@ -126,10 +126,10 @@
 
 // zlib & BGZF constants
 const char GZIP_ID1   = 31;
-const char GZIP_ID2   = 139;
+const char GZIP_ID2   = static_cast<char>(139);
 const char CM_DEFLATE = 8;
 const char FLG_FEXTRA = 4;
-const char OS_UNKNOWN = 255;
+const char OS_UNKNOWN = static_cast<char>(255);
 const char BGZF_XLEN  = 6;
 const char BGZF_ID1   = 66;
 const char BGZF_ID2   = 67;
--- a/src/toolkit/bamtools_filter.cpp
+++ b/src/toolkit/bamtools_filter.cpp
@@ -16,7 +16,7 @@
 #include <utils/bamtools_utilities.h>
 using namespace BamTools;
 
-#include <jsoncpp/json.h>
+#include <json/json.h>
 using namespace Json;
 
 #include <cstdio>
@@ -647,7 +647,7 @@
     if ( !reader.parse(document, root) ) {
         // use built-in error reporting mechanism to alert user what was wrong with the script
         cerr  << "bamtools filter ERROR: failed to parse script - see error message(s) below" << endl
-              << reader.getFormatedErrorMessages();
+              << reader.getFormattedErrorMessages();
         return false;     
     }
 
--- a/src/toolkit/bamtools_resolve.cpp
+++ b/src/toolkit/bamtools_resolve.cpp
@@ -410,7 +410,7 @@
         ReadGroupResolver& resolver = (*rgIter).second;
 
         // store read name with resolver
-        resolver.ReadNames.insert( make_pair<string,bool>(fields[1], true) ) ;
+        resolver.ReadNames.insert( make_pair(fields[1], true) ) ;
     }
 
     // if here, return success
@@ -607,7 +607,7 @@
     resolver.IsAmbiguous = ( fields.at(6) == TRUE_KEYWORD );
 
     // store RG entry and return success
-    readGroups.insert( make_pair<string, ReadGroupResolver>(name, resolver) );
+    readGroups.insert( make_pair(name, resolver) );
     return true;
 }
 
@@ -1014,7 +1014,7 @@
         }
 
         // if read name not found, store new entry
-        else resolver.ReadNames.insert( make_pair<string, bool>(al.Name, isCurrentMateUnique) );
+        else resolver.ReadNames.insert( make_pair(al.Name, isCurrentMateUnique) );
     }
 
     // close files
@@ -1046,7 +1046,7 @@
     SamReadGroupConstIterator rgEnd  = header.ReadGroups.ConstEnd();
     for ( ; rgIter != rgEnd; ++rgIter ) {
         const SamReadGroup& rg = (*rgIter);
-        m_readGroups.insert( make_pair<string, ReadGroupResolver>(rg.ID, ReadGroupResolver()) );
+        m_readGroups.insert( make_pair(rg.ID, ReadGroupResolver()) );
     }
 }
 
