--- 0.1.0/libs/type_safe/external/debug_assert/README.md	2019-11-03 15:07:38.539159586 -0500
+++ 9999/libs/type_safe/external/debug_assert/README.md	        2019-11-03 15:08:23.672248413 -0500
@@ -54,10 +54,6 @@
 
 <pre><code class="language-cpp">#define <a href='doc_debug_assert.md#debug_assert.hpp'>DEBUG_ASSERT_MARK_UNREACHABLE</a>
 
-#define <a href='doc_debug_assert.md#debug_assert.hpp'>DEBUG_ASSERT_PURE_FUNCTION</a>
-
-#define <a href='doc_debug_assert.md#debug_assert.hpp'>DEBUG_ASSERT_ASSUME</a>(Expr)
-
 #define <a href='doc_debug_assert.md#debug_assert.hpp'>DEBUG_ASSERT_FORCE_INLINE</a>
 
 #define <a href='doc_debug_assert.md#DEBUG_ASSERT_CUR_SOURCE_LOCATION'>DEBUG_ASSERT_CUR_SOURCE_LOCATION</a>

--- 0.1.0/libs/type_safe/external/debug_assert/debug_assert.hpp	2019-11-03 15:10:37.431523777 -0500
+++ 9999/libs/type_safe/external/debug_assert/debug_assert.hpp	2019-11-03 15:10:02.998376984 -0500
@@ -25,84 +25,46 @@
 #ifndef DEBUG_ASSERT_HPP_INCLUDED
 #define DEBUG_ASSERT_HPP_INCLUDED
 
-// Ignore __builtin_assume() warnings on clang.
-// See https://github.com/foonathan/debug_assert/issues/12
-#ifdef __clang__
-#pragma clang diagnostic push
-#pragma clang diagnostic ignored "-Wassume"
-#endif // __clang__
-
 #include <cstdlib>
 
 #ifndef DEBUG_ASSERT_NO_STDIO
-#include <cstdio>
+#    include <cstdio>
 #endif
 
 #ifndef DEBUG_ASSERT_MARK_UNREACHABLE
-#ifdef __GNUC__
-#define DEBUG_ASSERT_MARK_UNREACHABLE __builtin_unreachable()
-#elif defined(_MSC_VER)
-#define DEBUG_ASSERT_MARK_UNREACHABLE __assume(0)
-#else
+#    ifdef __GNUC__
+#        define DEBUG_ASSERT_MARK_UNREACHABLE __builtin_unreachable()
+#    elif defined(_MSC_VER)
+#        define DEBUG_ASSERT_MARK_UNREACHABLE __assume(0)
+#    else
 /// Hint to the compiler that a code branch is unreachable.
 /// Define it yourself prior to including the header to override it.
 /// \notes This must be usable in an expression.
-#define DEBUG_ASSERT_MARK_UNREACHABLE
-#endif
-#endif
-
-#ifndef DEBUG_ASSERT_PURE_FUNCTION
-#ifdef __GNUC__
-#define DEBUG_ASSERT_PURE_FUNCTION __attribute__((pure))
-#else
-/// Hint to the compiler that a function is pure.
-#define DEBUG_ASSERT_PURE_FUNCTION
-#endif
-#endif
-
-// checking for clang must come first because clang also defines __GNUC__.
-#if !defined(DEBUG_ASSERT_ASSUME) && defined(__clang__)
-// __has_builtin may not work in other compilers.
-#if __has_builtin(__builtin_assume)
-#define DEBUG_ASSERT_ASSUME(Expr) static_cast<void>(__builtin_assume(Expr), 0)
-#endif
-#endif
-
-#ifndef DEBUG_ASSERT_ASSUME
-#ifdef __GNUC__
-#define DEBUG_ASSERT_ASSUME(Expr) static_cast<void>((Expr) ? 0 : (__builtin_unreachable(), 0))
-#elif defined(_MSC_VER)
-#define DEBUG_ASSERT_ASSUME(Expr) static_cast<void>(__assume(Expr), 0)
-#else
-/// Hint to the compiler that a condition is `true`.
-/// Define it yourself prior to including the header to override it.
-/// \notes This must be usable in an expression,
-/// and yield a `void` value.
-#define DEBUG_ASSERT_ASSUME(Expr) static_cast<void>(0)
-#endif
+#        define DEBUG_ASSERT_MARK_UNREACHABLE
+#    endif
 #endif
 
 #ifndef DEBUG_ASSERT_FORCE_INLINE
-#ifdef __GNUC__
-#define DEBUG_ASSERT_FORCE_INLINE [[gnu::always_inline]] inline
-#elif defined(_MSC_VER)
-#define DEBUG_ASSERT_FORCE_INLINE __forceinline
-#else
+#    ifdef __GNUC__
+#        define DEBUG_ASSERT_FORCE_INLINE [[gnu::always_inline]] inline
+#    elif defined(_MSC_VER)
+#        define DEBUG_ASSERT_FORCE_INLINE __forceinline
+#    else
 /// Strong hint to the compiler to inline a function.
 /// Define it yourself prior to including the header to override it.
-#define DEBUG_ASSERT_FORCE_INLINE inline
-#endif
+#        define DEBUG_ASSERT_FORCE_INLINE inline
+#    endif
 #endif
 
 namespace debug_assert
 {
-    //=== source location ===//
-    /// Defines a location in the source code.
-    struct source_location
-    {
-        const char* file_name;   ///< The file name.
-        unsigned    line_number; ///< The line number.
-    };
+//=== source location ===//
+/// Defines a location in the source code.
+struct source_location
+{
+    const char* file_name;   ///< The file name.
+    unsigned    line_number; ///< The line number.
+};
 
 /// Expands to the current [debug_assert::source_location]().
 #define DEBUG_ASSERT_CUR_SOURCE_LOCATION                                                           \
@@ -111,222 +73,218 @@
         __FILE__, static_cast<unsigned>(__LINE__)                                                  \
     }
 
-    //=== level ===//
-    /// Tag type to indicate the level of an assertion.
-    template <unsigned Level>
-    struct level
-    {
-    };
+//=== level ===//
+/// Tag type to indicate the level of an assertion.
+template <unsigned Level>
+struct level
+{};
+
+/// Helper class that sets a certain level.
+/// Inherit from it in your module handler.
+template <unsigned Level>
+struct set_level
+{
+    static const unsigned level = Level;
+};
 
-    /// Helper class that sets a certain level.
-    /// Inherit from it in your module handler.
-    template <unsigned Level>
-    struct set_level
-    {
-        static const unsigned level = Level;
-    };
+template <unsigned Level>
+const unsigned set_level<Level>::level;
 
-    template <unsigned Level>
-    const unsigned set_level<Level>::level;
+/// Helper class that controls whether the handler can throw or not.
+/// Inherit from it in your module handler.
+/// If the module does not inherit from this class, it is assumed that
+/// the handle does not throw.
+struct allow_exception
+{
+    static const bool throwing_exception_is_allowed = true;
+};
 
-    /// Helper class that controls whether the handler can throw or not.
-    /// Inherit from it in your module handler.
-    /// If the module does not inherit from this class, it is assumed that
-    /// the handle does not throw.
-    struct allow_exception
+//=== handler ===//
+/// Does not do anything to handle a failed assertion (except calling
+/// [std::abort()]()).
+/// Inherit from it in your module handler.
+struct no_handler
+{
+    /// \effects Does nothing.
+    /// \notes Can take any additional arguments.
+    template <typename... Args>
+    static void handle(const source_location&, const char*, Args&&...) noexcept
+    {}
+};
+
+/// The default handler that writes a message to `stderr`.
+/// Inherit from it in your module handler.
+struct default_handler
+{
+    /// \effects Prints a message to `stderr`.
+    /// \notes It can optionally accept an additional message string.
+    /// \notes If `DEBUG_ASSERT_NO_STDIO` is defined, it will do nothing.
+    static void handle(const source_location& loc, const char* expression,
+                       const char* message = nullptr) noexcept
     {
-        static const bool throwing_exception_is_allowed = true;
-    };
-
-    //=== handler ===//
-    /// Does not do anything to handle a failed assertion (except calling
-    /// [std::abort()]()).
-    /// Inherit from it in your module handler.
-    struct no_handler
-    {
-        /// \effects Does nothing.
-        /// \notes Can take any additional arguments.
-        template <typename... Args>
-        static void handle(const source_location&, const char*, Args&&...) noexcept
-        {
-        }
-    };
-
-    /// The default handler that writes a message to `stderr`.
-    /// Inherit from it in your module handler.
-    struct default_handler
-    {
-        /// \effects Prints a message to `stderr`.
-        /// \notes It can optionally accept an additional message string.
-        /// \notes If `DEBUG_ASSERT_NO_STDIO` is defined, it will do nothing.
-        static void handle(const source_location& loc, const char* expression,
-                           const char* message = nullptr) noexcept
-        {
 #ifndef DEBUG_ASSERT_NO_STDIO
-            if (*expression == '\0')
-            {
-                if (message)
-                    std::fprintf(stderr, "[debug assert] %s:%u: Unreachable code reached - %s.\n",
-                                 loc.file_name, loc.line_number, message);
-                else
-                    std::fprintf(stderr, "[debug assert] %s:%u: Unreachable code reached.\n",
-                                 loc.file_name, loc.line_number);
-            }
-            else if (message)
-                std::fprintf(stderr, "[debug assert] %s:%u: Assertion '%s' failed - %s.\n",
-                             loc.file_name, loc.line_number, expression, message);
+        if (*expression == '\0')
+        {
+            if (message)
+                std::fprintf(stderr, "[debug assert] %s:%u: Unreachable code reached - %s.\n",
+                             loc.file_name, loc.line_number, message);
             else
-                std::fprintf(stderr, "[debug assert] %s:%u: Assertion '%s' failed.\n",
-                             loc.file_name, loc.line_number, expression);
+                std::fprintf(stderr, "[debug assert] %s:%u: Unreachable code reached.\n",
+                             loc.file_name, loc.line_number);
+        }
+        else if (message)
+            std::fprintf(stderr, "[debug assert] %s:%u: Assertion '%s' failed - %s.\n",
+                         loc.file_name, loc.line_number, expression, message);
+        else
+            std::fprintf(stderr, "[debug assert] %s:%u: Assertion '%s' failed.\n", loc.file_name,
+                         loc.line_number, expression);
 #else
-            (void)loc;
-            (void)expression;
-            (void)message;
+        (void)loc;
+        (void)expression;
+        (void)message;
 #endif
-        }
-    };
+    }
+};
 
-    /// \exclude
-    namespace detail
+/// \exclude
+namespace detail
+{
+    //=== boilerplate ===//
+    // from http://en.cppreference.com/w/cpp/types/remove_reference
+    template <typename T>
+    struct remove_reference
     {
-        //=== boilerplate ===//
-        // from http://en.cppreference.com/w/cpp/types/remove_reference
-        template <typename T>
-        struct remove_reference
-        {
-            using type = T;
-        };
-
-        template <typename T>
-        struct remove_reference<T&>
-        {
-            using type = T;
-        };
+        using type = T;
+    };
 
-        template <typename T>
-        struct remove_reference<T&&>
-        {
-            using type = T;
-        };
+    template <typename T>
+    struct remove_reference<T&>
+    {
+        using type = T;
+    };
 
-        // from http://stackoverflow.com/a/27501759
-        template <class T>
-        T&& forward(typename remove_reference<T>::type& t)
-        {
-            return static_cast<T&&>(t);
-        }
+    template <typename T>
+    struct remove_reference<T&&>
+    {
+        using type = T;
+    };
 
-        template <class T>
-        T&& forward(typename remove_reference<T>::type&& t)
-        {
-            return static_cast<T&&>(t);
-        }
+    // from http://stackoverflow.com/a/27501759
+    template <class T>
+    T&& forward(typename remove_reference<T>::type& t)
+    {
+        return static_cast<T&&>(t);
+    }
 
-        template <bool Value, typename T = void>
-        struct enable_if;
+    template <class T>
+    T&& forward(typename remove_reference<T>::type&& t)
+    {
+        return static_cast<T&&>(t);
+    }
 
-        template <typename T>
-        struct enable_if<true, T>
-        {
-            using type = T;
-        };
+    template <bool Value, typename T = void>
+    struct enable_if;
 
-        template <typename T>
-        struct enable_if<false, T>
-        {
-        };
+    template <typename T>
+    struct enable_if<true, T>
+    {
+        using type = T;
+    };
 
-        //=== helper class to check if throw is allowed ===//
-        template <class Handler, typename = void>
-        struct allows_exception
-        {
-            static const bool value = false;
-        };
+    template <typename T>
+    struct enable_if<false, T>
+    {};
+
+    //=== helper class to check if throw is allowed ===//
+    template <class Handler, typename = void>
+    struct allows_exception
+    {
+        static const bool value = false;
+    };
 
-        template <class Handler>
-        struct allows_exception<Handler,
-                                typename enable_if<Handler::throwing_exception_is_allowed>::type>
-        {
-            static const bool value = Handler::throwing_exception_is_allowed;
-        };
+    template <class Handler>
+    struct allows_exception<Handler,
+                            typename enable_if<Handler::throwing_exception_is_allowed>::type>
+    {
+        static const bool value = Handler::throwing_exception_is_allowed;
+    };
 
-        //=== regular void fake ===//
-        struct regular_void
-        {
-            constexpr regular_void() = default;
+    //=== regular void fake ===//
+    struct regular_void
+    {
+        constexpr regular_void() = default;
 
-            // enable conversion to anything
-            // conversion must not actually be used
-            template <typename T>
-            constexpr operator T&() const noexcept
-            {
-                // doesn't matter how to get the T
-                return DEBUG_ASSERT_MARK_UNREACHABLE, *static_cast<T*>(nullptr);
-            }
-        };
-
-        //=== assert implementation ===//
-        // function name will be shown on constexpr assertion failure
-        template <class Handler, typename... Args>
-        regular_void debug_assertion_failed(const source_location& loc, const char* expression,
-                                            Args&&... args)
+        // enable conversion to anything
+        // conversion must not actually be used
+        template <typename T>
+        constexpr operator T&() const noexcept
         {
-            return Handler::handle(loc, expression, detail::forward<Args>(args)...), std::abort(),
-                   regular_void();
+            // doesn't matter how to get the T
+            return DEBUG_ASSERT_MARK_UNREACHABLE, *static_cast<T*>(nullptr);
         }
+    };
 
-        // use enable if instead of tag dispatching
-        // this removes on additional function and encourage optimization
-        template <class Expr, class Handler, unsigned Level, typename... Args>
-        constexpr auto do_assert(
-            const Expr& expr, const source_location& loc, const char* expression, Handler,
-            level<Level>,
-            Args&&... args) noexcept(!allows_exception<Handler>::value
-                                     || noexcept(Handler::handle(loc, expression,
-                                                                 detail::forward<Args>(args)...)))
-            -> typename enable_if<Level <= Handler::level, regular_void>::type
-        {
-            static_assert(Level > 0, "level of an assertion must not be 0");
-            return expr() ? regular_void() :
-                            debug_assertion_failed<Handler>(loc, expression,
-                                                            detail::forward<Args>(args)...);
-        }
+    //=== assert implementation ===//
+    // function name will be shown on constexpr assertion failure
+    template <class Handler, typename... Args>
+    regular_void debug_assertion_failed(const source_location& loc, const char* expression,
+                                        Args&&... args)
+    {
+        return Handler::handle(loc, expression, detail::forward<Args>(args)...), std::abort(),
+               regular_void();
+    }
 
-        template <class Expr, class Handler, unsigned Level, typename... Args>
-        DEBUG_ASSERT_FORCE_INLINE constexpr auto do_assert(const Expr& expr, const source_location&,
-                                                           const char*, Handler, level<Level>,
-                                                           Args&&...) noexcept ->
-            typename enable_if<(Level > Handler::level), regular_void>::type
-        {
-            return DEBUG_ASSERT_ASSUME(expr()), regular_void();
-        }
+    // use enable if instead of tag dispatching
+    // this removes on additional function and encourage optimization
+    template <class Expr, class Handler, unsigned Level, typename... Args>
+    constexpr auto do_assert(
+        const Expr& expr, const source_location& loc, const char* expression, Handler, level<Level>,
+        Args&&... args) noexcept(!allows_exception<Handler>::value
+                                 || noexcept(Handler::handle(loc, expression,
+                                                             detail::forward<Args>(args)...))) ->
+        typename enable_if<Level <= Handler::level, regular_void>::type
+    {
+        static_assert(Level > 0, "level of an assertion must not be 0");
+        return expr() ? regular_void()
+                      : debug_assertion_failed<Handler>(loc, expression,
+                                                        detail::forward<Args>(args)...);
+    }
 
-        template <class Expr, class Handler, typename... Args>
-        constexpr auto do_assert(
-            const Expr& expr, const source_location& loc, const char* expression, Handler,
-            Args&&... args) noexcept(!allows_exception<Handler>::value
-                                     || noexcept(Handler::handle(loc, expression,
-                                                                 detail::forward<Args>(args)...)))
-            -> typename enable_if<Handler::level != 0, regular_void>::type
-        {
-            return expr() ? regular_void() :
-                            debug_assertion_failed<Handler>(loc, expression,
-                                                            detail::forward<Args>(args)...);
-        }
+    template <class Expr, class Handler, unsigned Level, typename... Args>
+    DEBUG_ASSERT_FORCE_INLINE constexpr auto do_assert(const Expr&, const source_location&,
+                                                       const char*, Handler, level<Level>,
+                                                       Args&&...) noexcept ->
+        typename enable_if<(Level > Handler::level), regular_void>::type
+    {
+        return regular_void();
+    }
 
-        template <class Expr, class Handler, typename... Args>
-        DEBUG_ASSERT_FORCE_INLINE constexpr auto do_assert(const Expr& expr, const source_location&,
-                                                           const char*, Handler, Args&&...) noexcept
-            -> typename enable_if<Handler::level == 0, regular_void>::type
-        {
-            return DEBUG_ASSERT_ASSUME(expr()), regular_void();
-        }
+    template <class Expr, class Handler, typename... Args>
+    constexpr auto do_assert(
+        const Expr& expr, const source_location& loc, const char* expression, Handler,
+        Args&&... args) noexcept(!allows_exception<Handler>::value
+                                 || noexcept(Handler::handle(loc, expression,
+                                                             detail::forward<Args>(args)...))) ->
+        typename enable_if<Handler::level != 0, regular_void>::type
+    {
+        return expr() ? regular_void()
+                      : debug_assertion_failed<Handler>(loc, expression,
+                                                        detail::forward<Args>(args)...);
+    }
 
-        DEBUG_ASSERT_PURE_FUNCTION constexpr bool always_false() noexcept
-        {
-            return false;
-        }
-    } // namespace detail
+    template <class Expr, class Handler, typename... Args>
+    DEBUG_ASSERT_FORCE_INLINE constexpr auto do_assert(const Expr&, const source_location&,
+                                                       const char*, Handler, Args&&...) noexcept ->
+        typename enable_if<Handler::level == 0, regular_void>::type
+    {
+        return regular_void();
+    }
+
+    constexpr bool always_false() noexcept
+    {
+        return false;
+    }
+} // namespace detail
 } // namespace debug_assert
 
 //=== assertion macros ===//
@@ -358,11 +316,10 @@
 /// will expand to nothing.
 /// This should not be necessary, the regular version is optimized away
 /// completely.
-#define DEBUG_ASSERT(Expr, ...)                                                                    \
-    static_cast<void>(                                                                             \
-        debug_assert::detail::do_assert([&]()                                                      \
-                                            DEBUG_ASSERT_PURE_FUNCTION noexcept { return Expr; },  \
-                                        DEBUG_ASSERT_CUR_SOURCE_LOCATION, #Expr, __VA_ARGS__))
+#    define DEBUG_ASSERT(Expr, ...)                                                                \
+        static_cast<void>(debug_assert::detail::do_assert(                                         \
+            [&]() noexcept { return Expr; }, DEBUG_ASSERT_CUR_SOURCE_LOCATION, #Expr,              \
+            __VA_ARGS__))
 
 /// Marks a branch as unreachable.
 ///
@@ -393,19 +350,14 @@
 /// will expand to `DEBUG_ASSERT_MARK_UNREACHABLE`.
 /// This should not be necessary, the regular version is optimized away
 /// completely.
-#define DEBUG_UNREACHABLE(...)                                                                     \
-    debug_assert::detail::do_assert(debug_assert::detail::always_false,                            \
-                                    DEBUG_ASSERT_CUR_SOURCE_LOCATION, "", __VA_ARGS__)
+#    define DEBUG_UNREACHABLE(...)                                                                 \
+        debug_assert::detail::do_assert(debug_assert::detail::always_false,                        \
+                                        DEBUG_ASSERT_CUR_SOURCE_LOCATION, "", __VA_ARGS__)
 #else
-#define DEBUG_ASSERT(Expr, ...) DEBUG_ASSERT_ASSUME(Expr)
+#    define DEBUG_ASSERT(Expr, ...) static_cast<void>(0)
 
-#define DEBUG_UNREACHABLE(...) (DEBUG_ASSERT_MARK_UNREACHABLE, debug_assert::detail::regular_void())
+#    define DEBUG_UNREACHABLE(...)                                                                 \
+        (DEBUG_ASSERT_MARK_UNREACHABLE, debug_assert::detail::regular_void())
 #endif
 
-// Ignore __builtin_assume() warnings on clang.
-// See https://github.com/foonathan/debug_assert/issues/12
-#ifdef __clang__
-#pragma clang diagnostic pop
-#endif // __clang__
-
 #endif // DEBUG_ASSERT_HPP_INCLUDED
